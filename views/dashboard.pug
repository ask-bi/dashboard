extend layout 

block content
  link(rel='stylesheet', href='/css/dashboard.css')
  .row
    .col-12
        .float-right
            button.btn.btn-primary(type="button",data-toggle="modal",data-target="#create-app-form") 
                span.glyphicon.glyphicon-plus Create App
    if apps.length
        .col-4.mx-auto.mt-2#app-container 
            h6.text-secondary.mt-4.lead Apps:
            ul.c-list-group
                each app in apps
                    li.c-list-item.py-1(onclick='appChange(this)',id=app._id)
                        = app.name
        .col-8.mx-auto.bg-white.mt-2.vh-70 
            .col-12.mx-auto.text-center.mt-5#empty-chat-box
                img.mt-5(src="/compass.png", width="100px")
                h6.text-secondary.mt-4.lead Select an app in the left to talk to your database
            .h-100.flex-column.col-12.d-none#chat-box
                div.h-100.d-flex.flex-column 
                    div#heading.row.flex-column.border-bottom
                        h1.text-secondary.mt-3.lead App Name
                    div#body.row.flex-column
                        .col-12.mx-auto.text-center.mt-5#empty
                            img.mt-3(src="/chat.png", width="100px")
                            h5.lead.text-primary.mt-3 How can I help you?
                            p.lead.text-secondary Examples of what I can do:
                            span - show me available data 
                            br
                            span - show me number of users
                        .col-12#bubble-container
                    div#controller.row.mt-auto.flex-column.border-top
                        .input-group.py-2 
                            input.form-control.d-flex(placeholder='Ask me!')
                            span.input-group-btn.pt-2.pr-2
                                i.fa.fa-microphone.text-primary
                            span.input-group-btn.pt-2.pr-2(onclick='send()')
                                i.fa.fa-paper-plane.text-primary

    else
        .col-12
            .col-4.mx-auto.text-center.mt-5
                img(src="/box.png")
                h5.text-secondary.mt-4.lead Your Box is Empty. Click below to create your first app. 
                button.btn.btn-primary.mt-2(type="button",data-toggle="modal",data-target="#create-app-form") 
                    span.glyphicon.glyphicon-plus Create App
    
    #create-app-form.modal.fade.bs-example-modal-sm(tabindex='-1' role='dialog' aria-hidden='true')
        .modal-dialog.modal-sm
            .modal-content
                .modal-body
                    form(method="post", action="/apps")
                        input(type='hidden', name='_csrf', value=_csrf)
                        .form-group
                            label(for='inputRPGName') App Name
                            input#inputRPGName.form-control(name='name' type='text' placeholder='e-commerce mysql instance' autofocus='')
                        .form-group
                            label(for='inputRPGName') Adapter
                            select.form-control(name='adaptor')
                                option MySQL 
                                option Mongo 
                                option Elastic Search
                                option DynamoDB
                        .form-group
                            label(for='inputRPGName') Connection String
                            input#inputRPGName.form-control(name='connectionString' type='text' placeholder='mysql://username:password@host' autofocus='')
                        if teams.length
                            .form-group
                                label(for='inputRPGName') Team
                                select.form-control(name='team')
                                    each team in teams
                                        option= team.name
                        a.pull-right.pt-4.pb-4(href='/teams',target='_blank') + create team
                        .containerButtons
                            button.floatLeft.btn.btn-default.btn48Percent(data-dismiss='modal') Cancel
                            button#buttonChangeRPGName.floatRight.btn.btn-success.btn48Percent(type="submit") Save
                .clear

    script.
        const apps = !{JSON.stringify(apps)}
        const appWithID = (appID) => {
            const app = apps.filter( app => appID === app._id );
            return app[0];
        }
        let oldActiveAppID = undefined;
        let chatBox = undefined;
        const appChange = (appElement) => {
            const appID = $(appElement).attr('id');
            const app = appWithID(appID);

            $('#body').removeClass('overflow-auto').find('#empty').show();
            const headerContainer = $('#chat-box').find('#heading').find('.lead');
            headerContainer.text(app.name);


            $('#empty-chat-box').hide();
            const chatWindow = $('#chat-box');
            chatWindow.removeClass('d-none');
            chatBox = chatWindow.find('#body').find('#bubble-container');
            chatBox.html('');

            const trigger = $(`#${appID}`);
            trigger.addClass('bg-white');

            const oldActiveApp = $(`#${oldActiveAppID}`);
            oldActiveApp.removeClass('bg-white');
            oldActiveAppID = appID;
        }
        const send = async () => {
            $('#body').find('#empty').hide();
            $('#body').addClass('overflow-auto');
            const command = $('#controller').find('input').val();
            try {
                insertRequest(command);
                $('#controller').find('input').val('');
                const data = await getResponse(command);
                if (data.type == 'table')
                    insertResponse(data);
                else (data.type == 'count')
                    insertResponse(data.content[0].count);
            } catch (e) {
                console.error(e);
            }
        }
        const getResponse = async (command) => {
            const uri = `/data/${oldActiveAppID}?command=${command}`;
            return new Promise( (resolve, reject) => {
                $.get(uri, (data, textStatus, jqXHR) => {
                    resolve(data);
                }).fail((e) => {
                    reject(e);
                });
            } );
        }
        const userCloud = (content, color='bg-primary') => {
            const html = `<div class='w-25 d-block ${color} text-white p-2 rounded m-1'>${content}</div>`;
            chatBox.append(html);
        }
        const insertResponse = (response) => {
            switch(response.type) {
                case 'plain_text':
                userCloud(response.content);
                break;
                case 'table':
                userCloud(JSON.stringify(response.content));
                break;
            }
        }
        const insertRequest = (request) => {
            userCloud(request, 'bg-success');
        }
